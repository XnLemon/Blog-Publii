{
    "version": "https://jsonfeed.org/version/1",
    "title": "XnLemon&#x27;s Blog",
    "description": "",
    "home_page_url": "https://blog.xnlemon.top",
    "feed_url": "https://blog.xnlemon.top/feed.json",
    "user_comment": "",
    "icon": "https://blog.xnlemon.top/media/website/A8499724977258E5F757A063D1EDA119.png",
    "author": {
        "name": "XnLemon"
    },
    "items": [
        {
            "id": "https://blog.xnlemon.top/rpcxue-xi-ji-xiang-mu-jin-du-shi-me-shi-rpc.html",
            "url": "https://blog.xnlemon.top/rpcxue-xi-ji-xiang-mu-jin-du-shi-me-shi-rpc.html",
            "title": "RPC学习及项目进度 - 1.什么是RPC",
            "summary": "本文项目更新地址:点我点我&gt;w&lt; 好久不更新 主播不是似了 是没活了 基本上这几个月都是嗯造基础学习&hellip;",
            "content_html": "<p>本文项目更新地址:<a href=\"https://github.com/XnLemon/nene-rpc\">点我点我&gt;w&lt;</a><a href=\"https://github.com/XnLemon/nene-rpc\" target=\"_blank\" rel=\"noopener noreferrer\"></a></p>\n<p>好久不更新 主播不是似了 是没活了 基本上这几个月都是嗯造基础学习 现在开始猛猛更新 也没人看！（x</p>\n<p>RPC的全称是Remote Procedure Call，即远程过程调用，是一种计算机通信<span class=\"words-blog hl-git-1\" data-tit=\"协议\" data-pretit=\"协议\">协议</span>。它允许程序在不同计算机之间进行通信和交互，就像本地调用一样。简单解读字面上的意思，远程是指要跨机器而非本机，所以需要用到网络编程才能实现。</p>\n<h2>为什么要用RPC</h2>\n<p><strong>RPC的作用就是体现在这样两个方面：</strong></p>\n<ul>\n<li>屏蔽远程调用跟本地调用的区别，让我们感觉就是调用项目内的方法；</li>\n<li>隐藏底层网络通信的复杂性，让我们更专注于业务逻辑。</li>\n</ul>\n<p>笔者认为在微服务和大规模分布式服务中 相较于使用HttpClient手搓调用通用可见的方式，RPC显得更效率，更简单。</p>\n<h2>RPC通信流程</h2>\n<p><strong>发起调用请求的那一方叫做调用方，被调用的一方叫做服务提供方。</strong></p>\n<p>为了实现这个目标，就需要在RPC<span class=\"words-blog hl-git-1\" data-tit=\"框架\" data-pretit=\"框架\">框架</span>里面<strong>对整个通信细节进行封装</strong>。RPC是一个远程调用，是需要通过网络来传输数据，并且RPC常用于业务系统之间的数据交互，需要保证其可靠性，所以RPC一般默认采用TCP来传输。常用的HTTP协议也是建立在TCP之上的。<br><br>网络传输的数据必须是二进制数据，但调用方请求的出入参数都是对象。对象是肯定没法直接在网络中传输的，需要提前把它转成可传输的二进制，并且要求转换算法是可逆的，这个过程一般叫做“<strong>序列化</strong>”。</p>\n<p>那我们来思考一下 如果我收到了一大串二进制数据 我该如何去分析这些是什么东西呢？</p>\n<p>那么协议就出现了。把数据格式的约定内容叫做“<strong>协议”</strong>。大多数的协议会分成两部分，分别是数据头和消息体。数据头一般用于身份识别，包括协议标识、数据大小、请求类型、序列化类型等信息；消息体主要是请求的业务参数信息和扩展属性等。</p>\n<p>根据协议格式，服务提供方就可以正确地从二进制数据中分割出不同的请求来，同时根据请求类型和序列化类型，把二进制的消息体逆向还原成请求对象。这个过程叫作“<strong>反序列化</strong>”。</p>\n<p><img loading=\"lazy\" src=\"https://i-blog.csdnimg.cn/direct/c51d75fdbd854eec8ebc191b49be2664.png\" data-is-external-image=\"true\"></p>\n<p>服务提供方再根据反序列化出来的请求对象找到对应的实现类，完成真正的方法调用，然后把执行结果序列化后，回写到对应的TCP通道里面。调用方获取到应答的数据包后，再反序列化成应答对象，这样调用方就完成了一次RPC调用。但是上述流程比较复杂，整体不太友好。</p>\n<p>所以可以采用<strong>动态代理</strong>的技术简化上述流程，通过字节码增强对方法进行拦截增强，以便于增加需要的额外处理逻辑。</p>\n<p>RPC的设计由Client，Client stub，Network ，Server stub，Server构成。 其中Client就是用来调用服务的，Cient stub是用来把调用的方法和参数序列化的（因为要在网络中传输，必须要把对象转变成字节），Network用来传输这些信息到Server stub， Server stub用来把这些信息反序列化的，Server就是服务的提供者，最终调用的就是Server提供的方法。(<a href=\"https://cn.dubbo.apache.org/zh-cn/blog/2019/01/07/%e6%b5%85%e8%b0%88-rpc/\">Dubbo-浅谈RPC</a>)</p>\n<p>在调用方的程序里面，RPC框架根据调用的服务接口提前生成动态代理实现类，并通过依赖注入等技术注入到声明了该接口的相关业务逻辑里面。该代理实现类会拦截所有的方法调用，在提供的方法处理逻辑里面完成一整套的远程调用，并把远程调用结果返回给调用方，这样调用方在调用远程方法的时候就获得了像调用本地接口一样的体验。<br><br></p>\n<p><img loading=\"lazy\" src=\"https://cn.dubbo.apache.org/imgs/blog/rpc/rpc-work-principle.png\" alt=\"RPC工作原理\" data-is-external-image=\"true\"></p>\n<p> </p>",
            "image": "https://blog.xnlemon.top/media/posts/8/E60D4C1A38FE3E9864723C44AA8A861F.jpg",
            "author": {
                "name": "XnLemon"
            },
            "tags": [
                   "tech"
            ],
            "date_published": "2025-10-28T21:40:42+08:00",
            "date_modified": "2025-10-29T02:49:22+08:00"
        },
        {
            "id": "https://blog.xnlemon.top/java-reflection.html",
            "url": "https://blog.xnlemon.top/java-reflection.html",
            "title": "Java - Reflection and AOP",
            "summary": "本文为目前自己对于理解Java反射这一机制的阶段性总结。如有错误并且身为读者的您有教学的兴致可以私信给予指正，我会非常感谢！——XnLemon Java 的反射机制是一个强大的功能，使得程序能够在运行时动态地与类和对象交互。这包括但不限于创建对象、访问字段、调用方法以及获取类结构信息（如父类、接口、注解等）。这使得 Java 程序可以在运行时动态地创建对象、调用方法、改变字段等，即便这些类、方法或字段在编写原始代码时不可知。这对于开发灵活的应用程序和构建复杂的框架（如&hellip;",
            "content_html": "<p class=\"msg msg--info\">本文为目前自己对于理解Java反射这一机制的阶段性总结。如有错误并且身为读者的您有教学的兴致可以私信给予指正，我会非常感谢！——XnLemon</p>\n<p class=\"ds-markdown-paragraph\">Java 的反射机制是一个强大的功能，使得程序能够在运行时动态地与类和对象交互。这包括但不限于创建对象、访问字段、调用方法以及<strong>获取类结构信息（如父类、接口、注解等）</strong>。这使得 Java 程序可以在运行时动态地创建对象、调用方法、改变字段等，即便这些类、方法或字段在编写原始代码时不可知。这对于开发灵活的应用程序和构建复杂的框架（如 Spring）至关重要。<strong>虽然反射作为相对底层的 API 有一定学习曲线</strong>，但它在软件开发中扮演着不可或缺的角色。</p>\n<p class=\"ds-markdown-paragraph\">在我看来，它与 AOP 这一思想有着极为密切的联系，<strong>特别是通过动态代理等技术实现方法拦截和增强逻辑的运行时织入</strong>。反射对于项目的解耦方面有着巨大的作用，例如实现框架的依赖注入、配置驱动的行为以及插件化架构。</p>\n<p><strong>E.g</strong></p>\n<pre class=\"language-java\"><code>//举例：获取类的Class对象的三种声明方式与输出一个类的所有字段和方法\n//User.java\npublic class User {\n    private String name;\n    private String email;\n    private String password;\n\n    static {\n        System.out.println(\"User class is loaded\");\n    }\n\n    public User() {\n        this.name = \"Nene7ko\";\n        this.email = \"Nene7ko@gmail.com\";\n        this.password = \"Nene7ko\";\n    }\n\n    public User(String name, String email, String password) {\n        this.name = name;\n        this.email = email;\n        this.password = password;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n}\n\n//Main.java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // 1. 类字面量 - 不触发初始化\n        Class&lt;User&gt; clazz = User.class;\n        System.out.println(\"通过.class获取: \" + clazz.getName());\n        \n        // 2. Class.forName - 触发初始化\n        Class&lt;?&gt; clazz1 = Class.forName(\"org.example.entity.User\");\n        System.out.println(\"通过Class.forName获取: \" + clazz1.getName());\n        \n        // 3. getClass() - 不触发初始化（因为类已初始化）\n        User user = new User(\"XnLemon\", \"xianingawa@gmail.com\", \"password\");\n        Class&lt;?&gt; clazz2 = user.getClass();\n        System.out.println(\"通过getClass()获取: \" + clazz2.getName());\n\n        Field[] field = clazz.getDeclaredFields();\n        for (Field f : field) {\n            System.out.println(\"1:\" + f.getName());\n        }\n\n        Method[] methods = clazz.getDeclaredMethods();\n        for (Method m : methods) {\n            System.out.println(\"2:\" + m.getName());\n\n        //调用一个方法\n        Constructor&lt;?&gt; constructor = clazz.getConstructor();\n        Object obj = constructor.newInstance();\n        System.out.println(\"3:\"+clazz.getDeclaredMethod(\"getName\").invoke(obj));\n\n        }\n    }\n}</code></pre>\n<p><strong>输出结果示例如下：</strong></p>\n<pre class=\"language-bash\"><code>通过.class获取: org.example.entity.User\nUser class is loaded\n通过Class.forName获取: org.example.entity.User\n通过getClass()获取: org.example.entity.User\n1:name\n1:email\n1:password\n2:getPassword\n2:getEmail\n2:getName\n3:Nene7ko</code></pre>\n<p><strong>Class 类中用于获取构造方法的方法</strong></p>\n<div class=\"table-wrapper\">\n<table style=\"width: 100%; height: 350.812px;\">\n<thead>\n<tr style=\"height: 48.5625px;\">\n<th style=\"width: 69.9001%; height: 48.5625px;\">方法名</th>\n<th style=\"width: 30.0999%; height: 48.5625px;\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr style=\"height: 75.5625px;\">\n<td style=\"width: 69.9001%; height: 75.5625px;\">Constructor&lt;?&gt;[] getConstructors()</td>\n<td style=\"width: 30.0999%; height: 75.5625px;\">返回所有公共构造方法对象的数组</td>\n</tr>\n<tr style=\"height: 75.5625px;\">\n<td style=\"width: 69.9001%; height: 75.5625px;\">Constructor&lt;?&gt;[] getDeclaredConstructors()</td>\n<td style=\"width: 30.0999%; height: 75.5625px;\">返回所有构造方法对象的数组</td>\n</tr>\n<tr style=\"height: 75.5625px;\">\n<td style=\"width: 69.9001%; height: 75.5625px;\">Constructor getConstructor(Class&lt;?&gt;… parameterTypes)</td>\n<td style=\"width: 30.0999%; height: 75.5625px;\">返回单个公共构造方法对象</td>\n</tr>\n<tr style=\"height: 75.5625px;\">\n<td style=\"width: 69.9001%; height: 75.5625px;\">Constructor getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td>\n<td style=\"width: 30.0999%; height: 75.5625px;\">返回单个构造方法对象</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Constructor 类中用于创建对象的方法</strong></p>\n<div class=\"table-wrapper\">\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T newInstance(Object… initargs)</td>\n<td>根据指定的构造方法创建对象</td>\n</tr>\n<tr>\n<td>void setAccessible(boolean flag)</td>\n<td>设置为 true,表示取消访问检查</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>反射获取成员变量</strong></p>\n<div class=\"table-wrapper\">\n<table style=\"width: 100%;\">\n<thead>\n<tr>\n<th style=\"width: 54.4936%;\">方法名</th>\n<th style=\"width: 45.5064%;\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"width: 54.4936%;\">Field[] getFields()</td>\n<td style=\"width: 45.5064%;\">返回所有公共成员变量对象的数组</td>\n</tr>\n<tr>\n<td style=\"width: 54.4936%;\">Field[] getDeclaredFields()</td>\n<td style=\"width: 45.5064%;\">返回所有成员变量对象的数组</td>\n</tr>\n<tr>\n<td style=\"width: 54.4936%;\">Field getField(String name)</td>\n<td style=\"width: 45.5064%;\">返回单个公共成员变量对象</td>\n</tr>\n<tr>\n<td style=\"width: 54.4936%;\">Field getDeclaredField(String name)</td>\n<td style=\"width: 45.5064%;\">返回单个成员变量对象</td>\n</tr>\n<tr>\n<td style=\"width: 54.4936%;\">void set(Object instance, Object value)</td>\n<td style=\"width: 45.5064%;\">给指定对象的成员变量赋值</td>\n</tr>\n<tr>\n<td style=\"width: 54.4936%;\">Object get(Object instance)</td>\n<td style=\"width: 45.5064%;\">返回成员变量的值</td>\n</tr>\n</tbody>\n</table>\n<p>在了解到以上这些之后，我开始探究Reflection这一功能在AOP中的应用</p>\n<p>首先我们需要理解一个问题：<strong>我们为何需要AOP (Aspect Orient Programming)？</strong></p>\n<p>在我看来，AOP是OOP思想的延伸体现。</p>\n<p class=\"ds-markdown-paragraph\">OOP虽然能很好地进行<strong>垂直分解</strong>（创建职责单一的对象），但在处理<strong>横切关注点</strong>（cross-cutting concerns）时存在天然缺陷：</p>\n<ul>\n<li>\n<p class=\"ds-markdown-paragraph\">日志记录、事务管理、安全检查等需求会<strong>横向跨越</strong>多个业务模块</p>\n</li>\n<li>\n<p class=\"ds-markdown-paragraph\">导致相同代码<strong>重复散落</strong>在各业务类中</p>\n</li>\n<li>\n<p class=\"ds-markdown-paragraph\">违反DRY原则(Don't Repeat Yourself)</p>\n</li>\n</ul>\n<p>面向切面编程在我看来是一种将我们需要进行横向拓展的业务给切片剥离出来并使用Reflection中的动态代理功能（基础实现），实例化作为一个新的代理target对象，从而可以对一些常用的方法（如记录日志，更新等等）减少复用。</p>\n<p>在程序运行期间，以不修改源码的前提下对方法进行增强，从而降低代码耦合度，是一种便于维护，提高开发效率的一种思考方式。</p>\n<p class=\"ds-markdown-paragraph\">现代框架（如Spring）已将AOP与IOC完美融合，形成如下结构：</p>\n<div class=\"md-code-block md-code-block-dark\">\n<div class=\"md-code-block-banner-wrap\">\n<div class=\"md-code-block-banner md-code-block-banner-lite\">\n<div class=\"_121d384\">\n<div class=\"d2a24f03\">\n<div class=\"ds-segmented _81e8954\" role=\"tablist\"><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/5/deepseek_mermaid_20250712_01d0c1.png\" alt=\"\" width=\"2792\" height=\"939\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/5/responsive/deepseek_mermaid_20250712_01d0c1-xs.png 640w ,https://blog.xnlemon.top/media/posts/5/responsive/deepseek_mermaid_20250712_01d0c1-sm.png 768w ,https://blog.xnlemon.top/media/posts/5/responsive/deepseek_mermaid_20250712_01d0c1-md.png 1024w ,https://blog.xnlemon.top/media/posts/5/responsive/deepseek_mermaid_20250712_01d0c1-lg.png 1366w ,https://blog.xnlemon.top/media/posts/5/responsive/deepseek_mermaid_20250712_01d0c1-xl.png 1600w ,https://blog.xnlemon.top/media/posts/5/responsive/deepseek_mermaid_20250712_01d0c1-2xl.png 1920w\"></figure></div>\n<div role=\"tablist\"> </div>\n<div role=\"tablist\">以上为我对于项目结构以及AOP思想的一些笨拙的思考。接下来我们来看反射里的动态代理及代理对象，本文暂时只更新一下基于JDK的动态代理TwT</div>\n<div role=\"tablist\"> </div>\n<div role=\"tablist\"><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">我们先来比较Java的class和interface的区别：</span></div>\n<div role=\"tablist\">\n<ul>\n<li>可以实例化class（非abstract）；</li>\n<li>不能实例化interface。</li>\n</ul>\n<p>所有interface类型的变量总是通过某个实例向上转型并赋值给接口类型变量的，<span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">有没有可能不编写实现类，直接在运行期创建某个interface的实例呢？</span></p>\n<p>这是可能的，因为Java标准库提供了一种动态代理（Dynamic Proxy）的机制：可以在运行期动态创建某个interface的实例。</p>\n<p>定义接口：</p>\n<pre class=\"language-java\"><code>public interface Hello {\n    void morning(String name);\n}\n</code></pre>\n<p>编写实现类：</p>\n<pre class=\"language-java\"><code>public class HelloWorld implements Hello {\n    public void morning(String name) {\n        System.out.println(\"Good morning, \" + name);\n    }\n}\n</code></pre>\n<p>创建实例，转型为接口并调用：</p>\n<pre class=\"language-java\"><code>Hello hello = new HelloWorld();\nhello.morning(\"Nene7ko\");\n</code></pre>\n<p>以上为静态代码的实现，接下来我们来看动态代码的实现</p>\n<p>重点是直接通过JDK提供的一个Proxy.newProxyInstance()方法创建了一个接口对象 实现如下</p>\n<pre class=\"language-java\"><code>//Target.java\npublic class Target implements TargetInterface {\n    public void save() {\n        System.out.println(\"save running.....\");\n    }\n}\n//TargetInterface.java\npublic interface TargetInterface {\n\n    public void save();\n\n}\n\n//ProxyTest.java\npublic class ProxyTest {\n\n    public static void main(String[] args) {\n\n        //目标对象\n        final Target target = new Target();\n\n        //增强对象\n        final Advice advice = new Advice();\n\n        //返回值 就是动态生成的代理对象\n        TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(\n                target.getClass().getClassLoader(), //目标对象类加载器\n                target.getClass().getInterfaces(), //目标对象相同的接口字节码对象数组\n                new InvocationHandler() {\n                    //调用代理对象的任何方法  实质执行的都是invoke方法\n                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                        advice.before(); //前置增强\n                        Object invoke = method.invoke(target, args);//执行目标方法\n                        advice.afterReturning(); //后置增强\n                        return invoke;\n                    }\n                }\n        );\n\n        //调用代理对象的方法\n        proxy.save();\n\n    }\n\n}</code></pre>\n<p>以下为源码里newProxyInstance的具体实现</p>\n<pre class=\"language-java\"><code>//Proxy.java\npublic static Object newProxyInstance(ClassLoader loader,\n                                          Class&lt;?&gt;[] interfaces,\n                                          InvocationHandler h) {\n        Objects.requireNonNull(h);\n\n        @SuppressWarnings(\"removal\")\n        final Class&lt;?&gt; caller = System.getSecurityManager() == null\n                                    ? null\n                                    : Reflection.getCallerClass();\n\n        /*\n         * Look up or generate the designated proxy class and its constructor.\n         */\n        Constructor&lt;?&gt; cons = getProxyConstructor(caller, loader, interfaces);\n\n        return newProxyInstance(caller, cons, h);\n    }\n</code></pre>\n<p>在运行期动态创建一个interface实例的方法如下：<br><br>1.定义一个InvocationHandler实例 (源码见InvocationHandler.java)，它负责实现接口的方法调用；<br>2.通过Proxy.newProxyInstance()创建interface实例，它需要3个参数：<br>    1&gt;使用的ClassLoader，通常就是接口类的ClassLoader；<br>    2&gt;需要实现的接口数组，至少需要传入一个接口进去；<br>    3&gt;用来处理接口方法调用的InvocationHandler实例。<br>3.将返回的Object强制转型为接口。</p>\n<p>动态代理不是\"魔术\"，而是运行时生成的<strong>真实类。</strong>并且注意本处所有的接口方法都会被代理，包括自定义的业务方法以及Object的toString()方法等。</p>\n<p>所以在上述例子中 我们的代理对象可以把目标对象target的核心目标方法提取出来进行操作 从而可以在前后随意加上我们想要的同类型拓展业务 从而达到AOP的思想。</p>\n<p>当然以上的实现可以继续优化，例如：利用缓存使得性能提升，使用异常处理让代码更健壮，当然由于笔者能力暂时有限TwT 所以在此不再进行拓展。</p>\n<p>如果有对引导一位新人感兴趣的老师 请帮帮我!&gt;&lt;</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
            "image": "https://blog.xnlemon.top/media/posts/5/7AD60352CC03AB8749D60515CBBB8BBF.jpg",
            "author": {
                "name": "XnLemon"
            },
            "tags": [
                   "tech"
            ],
            "date_published": "2025-07-13T02:11:34+08:00",
            "date_modified": "2025-07-13T22:11:41+08:00"
        },
        {
            "id": "https://blog.xnlemon.top/problems-encountered-while-studying.html",
            "url": "https://blog.xnlemon.top/problems-encountered-while-studying.html",
            "title": "Problems Encountered while Studying.",
            "summary": "Info:本文旨在总结我个人在初学习时遇到的某些问题 纯笨蛋的问题我也得写 希望可以帮到在我之后的初学者少浪费时间（ 这问题真的难绷 我使用的是3.5.5版本的&hellip;",
            "content_html": "<p class=\"msg msg--info\">Info:本文旨在总结我个人在初学习时遇到的某些问题 纯笨蛋的问题我也得写 希望可以帮到在我之后的初学者少浪费时间（</p>\n<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1ivocniv81n\">P1.Mybatis-plus-boot-starter问题(Invalid value type for attribute 'factoryBeanObjectType': java.lang.String)</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1ivocniv81n\">P1.Mybatis-plus-boot-starter问题(Invalid value type for attribute 'factoryBeanObjectType': java.lang.String)</h3>\n<p>这问题真的难绷 我使用的是3.5.5版本的 可以发现里面有个2.1.2的mybatis-spring</p>\n<p>报错Invalid value type for attribute 'factoryBeanObjectType': java.lang.String<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/4/985FF7A7EB9C11B1EA69DE765D7DFD9E.png\" alt=\"\" width=\"502\" height=\"141\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/4/responsive/985FF7A7EB9C11B1EA69DE765D7DFD9E-xs.png 640w ,https://blog.xnlemon.top/media/posts/4/responsive/985FF7A7EB9C11B1EA69DE765D7DFD9E-sm.png 768w ,https://blog.xnlemon.top/media/posts/4/responsive/985FF7A7EB9C11B1EA69DE765D7DFD9E-md.png 1024w ,https://blog.xnlemon.top/media/posts/4/responsive/985FF7A7EB9C11B1EA69DE765D7DFD9E-lg.png 1366w ,https://blog.xnlemon.top/media/posts/4/responsive/985FF7A7EB9C11B1EA69DE765D7DFD9E-xl.png 1600w ,https://blog.xnlemon.top/media/posts/4/responsive/985FF7A7EB9C11B1EA69DE765D7DFD9E-2xl.png 1920w\"></figure>\n<p>解决方案两个：</p>\n<p>1.改用boot3-starter</p>\n<p>2.pom.xml导入3.0.x版本</p>",
            "image": "https://blog.xnlemon.top/media/posts/4/5FE79D6477539CD595EF77498D6212E8.jpg",
            "author": {
                "name": "XnLemon"
            },
            "tags": [
                   "tech"
            ],
            "date_published": "2025-07-10T03:57:06+08:00",
            "date_modified": "2025-07-13T03:16:11+08:00"
        },
        {
            "id": "https://blog.xnlemon.top/learning-part-1-crud.html",
            "url": "https://blog.xnlemon.top/learning-part-1-crud.html",
            "title": "Learning. Part 1 - CRUD",
            "summary": "由于大一养成了非常良好的搜索资料和信息，纯读文档也不嫌恶心的习惯（x 我就硬生生读了两天左右的各种文档，收获肯定是有的，但是我觉得不如跟着做一点小东西来的快，基础知识也有。而且发现 这一条路居然有好多视频可以看ToT 好爽ToT 当然了我觉得这种东西跨出的第一步应该就是一些简单的crud的项目，所以我同时看了两个，第一个就是一个简单的可以当作程序设计的那种课水上去的，那种图书馆系统（x&hellip;",
            "content_html": "<p>由于大一养成了非常良好的搜索资料和信息，纯读文档也不嫌恶心的习惯（x</p>\n<p>我就硬生生读了两天左右的各种文档，收获肯定是有的，但是我觉得不如跟着做一点小东西来的快，基础知识也有。而且发现 这一条路居然有好多视频可以看ToT</p>\n<p>好爽ToT</p>\n<p>当然了我觉得这种东西跨出的第一步应该就是一些简单的crud的项目，所以我同时看了两个，第一个就是一个简单的可以当作程序设计的那种课水上去的，那种图书馆系统（x</p>\n<p>纯crud好吧 正经大果确实够味</p>\n<p>第二个就是比较大了 我也许是喜欢直接应用？准备跟着一个仿着b站做的视频平台项目进行一个springboot的实战 基础知识是会一些的 但是对于项目没有概念 应该会很麻烦 当然是慢慢推进 两头同时看看 可能我现在描述的东西还不够专业 但是基本上是稳步推进的 我大概会用一个暑假完成它（懂不懂5点睡觉阴间作息的含金量啊嗯）</p>\n<p>我在读了很多文章后感觉 个人对于生产环节的一些思考和见解是非常重要的 因为在实际开发过程中是真的要考虑需求与开发成本之类的事情 目前还对真正的项目没有认知 我希望学习以后也可以有一番属于自己的理解</p>\n<p>先这样！后续会继续补充我这第一Part的路线和成果&gt;w&lt;</p>\n<p>2025.06.17</p>\n<p>放假了之后有了很多正常的时间 目前在同时推进JVM的学习和SpringBoot框架和MyBatis的应用 SQL已经接触过一部分可以手写一些语句 可以满足crud的要求 所以感觉路线还是蛮正常的？基础很重要所以会偏重于JVM的学习..吧？TwT自己一个人好难啊 对自己要求还是低了TwT 我好笨 赶紧搓出来先把这Part结束了然后继续做</p>\n<p>2025.07.07</p>\n<p>今天用Mybatis+SpringBoot+Vue3+Element Plus 搓了一个前后端基本上实现了数据库crud的小玩意 明天总结一下自己今天遇到的问题 总之收获还是挺大的嗯嗯 也是初步了解了springboot框架和前后端的交互方式吧 但是写的一坨 一坨答辩端上来了 不过是开始 嗯嗯嗯（</p>\n<p>os:我说实话感觉前端一堆组件开堆像写osu的谱（</p>\n<p>2025.07.08</p>\n<p>这两天在初步跟着敲并理解 有知识积累的感觉 继续加油喵&gt;&lt;</p>\n<p>唉感觉自己走的每一步都比别人慢了一点点 纯自己活该 已经很不自信了</p>\n<p>2025.07.10</p>\n<p>苍穹外卖(70/200) 感觉前面1-50的教学都是在教这一part的东西 与数据库交互 分析需求 <span class=\"md-plain\">分析出业务规则 </span><span class=\"md-plain\">设计接口 </span><span class=\"md-plain\">梳理表之间的关系 实现代码 </span>明确springboot层级 感觉这一部分已经吸收的差不多了！</p>",
            "image": "https://blog.xnlemon.top/media/posts/3/96138542c945b9121b8cb1a692d5a6cc.jpg",
            "author": {
                "name": "XnLemon"
            },
            "tags": [
                   "随笔",
                   "tech"
            ],
            "date_published": "2025-06-17T01:21:56+08:00",
            "date_modified": "2025-07-22T14:25:00+08:00"
        },
        {
            "id": "https://blog.xnlemon.top/test.html",
            "url": "https://blog.xnlemon.top/test.html",
            "title": "Review.",
            "summary": "在最前面 我要向过去的我道歉 我没能走出困境导致现在重新再来。 第一年的我对这个领域充满好奇 跟随一位学长的脚步走下了相当的路程&hellip;",
            "content_html": "<p>在最前面 我要向过去的我道歉 我没能走出困境导致现在重新再来。</p>\n<p>第一年的我对这个领域充满好奇 跟随一位学长的脚步走下了相当的路程 但是我没有想明白 我的心态打败了我 没有学到新知识和新链子的欢喜 着重在的是爆0的痛苦与没有成果的迷茫。</p>\n<p>我承认我这一年来停滞不前 怀疑自己 直到再也提不起来劲 没有明路的我于去年的8月停止了前进 随后陷入了深渊 现在回头望 以一个旁观者的身份貌似想明白了很多事情 不再执着于某些事情的顿悟与豁然开朗 让我现在可以重新开始一切 大概还来得及</p>\n<p>很可惜我没办法再回头捡起那些让我伤心的东西 所以我现在会用一段时间来学习开发方向的知识 并在此处记录我的足迹。</p>\n<p>2025.06.11</p>\n<p>Part2</p>\n<p>我能感受到世界在离我远去。</p>\n<p><br>我的言语已经不再有深入人心的力量，遇到问题的反应也变得迟钝并且踌躇不前。这是我先前所有经历过的错误导致的吗？我的内心在说是的，之前的我和现在的我差距太大了。自信且盲目，当吃了很多苦之后才发觉到</p>\n<p><br>——“原来我不该这样做啊。”<br>——“再坚持一点是不是就真的熬过去了？”<br>——“原来他一直在骗我啊。”</p>\n<p><br>在遇到多种挫折一起叠加在我身上之后，我对于这些事情多了一层明晰，但少了三分自信。</p>\n<p><br>哦，可能不止三分。</p>\n<p><br>我无数次想着自己面对这些人和事应该做什么 怎么做 没错 也确实做到了很多 我居然真的做到了自己之前不敢做的事情。可以面对着将自己拉入弱势来强迫我做我不喜欢事情的人，选择无视（能力范围内已经做够了）。但是还是很不忍心;; </p>\n<p><br>少了很多事 完全想通之后 眼下正应该忙自己正经的事情了 即将开始 还来得及。我很期待我接下来两个月的努力与表现。先给自己打个气owo（）</p>\n<p><br>我恨我自己像块木头。我也很庆幸我遇到了她 我很喜欢她 她很可爱 我完全可以说我的情绪在她面前都不算什么 每次我都会变得很平静 然后变成笨蛋。即使我要地鸣了 她两句话就又给我全憋回去了 快得很。然后我就</p>\n<p><br>“啊啊原来是这样我全部都理解了.jpg”</p>\n<p><br>太权威了。<br>咳咳 一定是我善解人意对吧 不对也得对。</p>\n<p><br>我改了很多 慢慢摘掉了很多的问题 越来越不敏感的我 很棒？好像确实很棒。我就应该改变很多 将重心转移到自己身上不会错的。</p>\n<p><br>感觉好像还是得社交啊 我怕再盲目一次 好在这个方向不像之前一样资料那么少 感觉有很多路可以抄</p>\n<p><br>看到之前自己说过的好多所谓豪言壮语 好像都是自己的幻想罢了 对于自己的定位没有找准 没什么信心和兴趣的方向 也没有很大的努力 也没有什么肉眼可见的成果 还尝试去成为某些人 最后把自己摔得很惨 太坏了 我怎么这么坏啊 怎么每个阶段都是慢了一拍。好绝望的。</p>\n<p><br>越来越觉得是不是自己没心气了。我不想被别人说是没心气的人。当然我过去这操作被说是没心气不坚持我也认了。哎呦我怎么这么坏啊。</p>\n<p>感谢各位朋友 如果你能在这里看到 我真的很感谢你的关注并且还能读下去我破防的小作文。</p>\n<p>2025.06.30</p>\n<p> </p>",
            "image": "https://blog.xnlemon.top/media/posts/2/BF23A6E08344A66B39B905D17D24BE95.jpg",
            "author": {
                "name": "XnLemon"
            },
            "tags": [
                   "随笔"
            ],
            "date_published": "2025-06-05T17:40:03+08:00",
            "date_modified": "2025-07-07T03:32:27+08:00"
        },
        {
            "id": "https://blog.xnlemon.top/a-easy-tutorial-on-linklab.html",
            "url": "https://blog.xnlemon.top/a-easy-tutorial-on-linklab.html",
            "title": "Easy Tutorial on Linklab for NJUPT-CS",
            "summary": "阅读本文你需要的工具：IDA(没有也可以), XELFviewer 今天真的很头疼，头疼的要命。 可以看一下phase1.o文件。 可以发现它将我们的s字符串首地址给了rdi作为puts的一参使用。我们可以去看一下这个字符串常量是什么样&hellip;",
            "content_html": "<p class=\"msg msg--info\">阅读本文你需要的工具：IDA(没有也可以), <a href=\"https://github.com/horsicq/XELFViewer\">XELFviewer</a></p>\n<h2>前言</h2>\n<p>今天真的很头疼，头疼的要命。</p>\n<h2>Phase1</h2>\n<p>可以看一下phase1.o文件。</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/F54E5D0CD088AABCB683687E2FD87626.png\" alt=\"\" width=\"437\" height=\"250\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/F54E5D0CD088AABCB683687E2FD87626-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/F54E5D0CD088AABCB683687E2FD87626-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/F54E5D0CD088AABCB683687E2FD87626-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/F54E5D0CD088AABCB683687E2FD87626-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/F54E5D0CD088AABCB683687E2FD87626-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/F54E5D0CD088AABCB683687E2FD87626-2xl.png 1920w\"></figure>\n<p>可以发现它将我们的s字符串首地址给了rdi作为puts的一参使用。我们可以去看一下这个字符串常量是什么样</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/F0CE68D5EEC872CED264D826DC75872D.png\" alt=\"\" width=\"489\" height=\"98\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/F0CE68D5EEC872CED264D826DC75872D-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/F0CE68D5EEC872CED264D826DC75872D-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/F0CE68D5EEC872CED264D826DC75872D-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/F0CE68D5EEC872CED264D826DC75872D-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/F0CE68D5EEC872CED264D826DC75872D-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/F0CE68D5EEC872CED264D826DC75872D-2xl.png 1920w\"></figure>\n<p>这边可以直接用IDA改 但是考虑到可能有人没办法搞到所以我们使用开源的<a href=\"https://github.com/horsicq/XELFViewer\">XELFviewer<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/EF70106B6D44A59474F0DFA9B1D3EA56.png\" alt=\"\" width=\"573\" height=\"124\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/EF70106B6D44A59474F0DFA9B1D3EA56-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/EF70106B6D44A59474F0DFA9B1D3EA56-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/EF70106B6D44A59474F0DFA9B1D3EA56-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/EF70106B6D44A59474F0DFA9B1D3EA56-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/EF70106B6D44A59474F0DFA9B1D3EA56-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/EF70106B6D44A59474F0DFA9B1D3EA56-2xl.png 1920w\"></figure></a></p>\n<p>也是看到了这一串字符串 只需要将它改为自己的学号就好了 选中这一堆然后右键 编辑十六进制 我这里举例为B23000000 记得把右上角的只读关掉</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/89C5CDCA9B311D94DA2E583B569C960A.png\" alt=\"\" width=\"579\" height=\"247\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/89C5CDCA9B311D94DA2E583B569C960A-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/89C5CDCA9B311D94DA2E583B569C960A-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/89C5CDCA9B311D94DA2E583B569C960A-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/89C5CDCA9B311D94DA2E583B569C960A-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/89C5CDCA9B311D94DA2E583B569C960A-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/89C5CDCA9B311D94DA2E583B569C960A-2xl.png 1920w\"></figure>\n<p>之后进终端</p>\n<pre class=\"language-bash\"><code>gcc -no-pie -o lb1 main.o phase1.o\n./lb1</code></pre>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/QQ20250527-215346.png\" alt=\"\" width=\"1035\" height=\"203\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/QQ20250527-215346-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/QQ20250527-215346-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/QQ20250527-215346-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/QQ20250527-215346-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/QQ20250527-215346-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/QQ20250527-215346-2xl.png 1920w\"></figure>\n<h2>Phase2</h2>\n<p>看一下phase2.o文件。懒得看直接f5吧。</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/EDB24C471F43FC287142F59C7DAA9416.png\" alt=\"\" width=\"536\" height=\"183\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/EDB24C471F43FC287142F59C7DAA9416-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/EDB24C471F43FC287142F59C7DAA9416-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/EDB24C471F43FC287142F59C7DAA9416-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/EDB24C471F43FC287142F59C7DAA9416-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/EDB24C471F43FC287142F59C7DAA9416-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/EDB24C471F43FC287142F59C7DAA9416-2xl.png 1920w\"></figure>\n<p>我们可以看到它把这个yhijersvq字符串copy到了v2处 然后下面这个putchar其实是去一个未定义的大小为256的char数组<span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">IqLUAJPrUp中各个字母对应的位置去挨个找 可以从下图看到char数组的Ndx是5</span></p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/65434CC859B1CD229A6FF8FD9CBDD87A-2.png\" alt=\"\" width=\"1022\" height=\"288\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/65434CC859B1CD229A6FF8FD9CBDD87A-2-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/65434CC859B1CD229A6FF8FD9CBDD87A-2-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/65434CC859B1CD229A6FF8FD9CBDD87A-2-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/65434CC859B1CD229A6FF8FD9CBDD87A-2-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/65434CC859B1CD229A6FF8FD9CBDD87A-2-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/65434CC859B1CD229A6FF8FD9CBDD87A-2-2xl.png 1920w\"></figure>\n<p><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">结合题目 我们需要先把它改为UND弱符号再写一个patch文件去定义强符号然后link。</span></p>\n<p>先改phase2.o 看一下.symtab里 找到了这个符号 把它的Ndx改为0(UND)。</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/8DF9AB2B5541D8CE7E4E59DE3CB6020D.png\" alt=\"\" width=\"1570\" height=\"355\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/8DF9AB2B5541D8CE7E4E59DE3CB6020D-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/8DF9AB2B5541D8CE7E4E59DE3CB6020D-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/8DF9AB2B5541D8CE7E4E59DE3CB6020D-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/8DF9AB2B5541D8CE7E4E59DE3CB6020D-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/8DF9AB2B5541D8CE7E4E59DE3CB6020D-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/8DF9AB2B5541D8CE7E4E59DE3CB6020D-2xl.png 1920w\"></figure>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/10E5398F5B824DE7661CD66B20B5E29E.png\" alt=\"\" width=\"709\" height=\"185\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/10E5398F5B824DE7661CD66B20B5E29E-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/10E5398F5B824DE7661CD66B20B5E29E-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/10E5398F5B824DE7661CD66B20B5E29E-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/10E5398F5B824DE7661CD66B20B5E29E-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/10E5398F5B824DE7661CD66B20B5E29E-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/10E5398F5B824DE7661CD66B20B5E29E-2xl.png 1920w\"></figure>\n<p>我们可以看到变为了UND</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/A7042EF041041DD728328AF95AAFFAF0-2.png\" alt=\"\" width=\"861\" height=\"295\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/A7042EF041041DD728328AF95AAFFAF0-2-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/A7042EF041041DD728328AF95AAFFAF0-2-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/A7042EF041041DD728328AF95AAFFAF0-2-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/A7042EF041041DD728328AF95AAFFAF0-2-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/A7042EF041041DD728328AF95AAFFAF0-2-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/A7042EF041041DD728328AF95AAFFAF0-2-2xl.png 1920w\"></figure>\n<p>然后定义 举例为B23000000</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/3D459ED64F3706C18091CB08B63F1216-2.png\" alt=\"\" width=\"522\" height=\"158\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/3D459ED64F3706C18091CB08B63F1216-2-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/3D459ED64F3706C18091CB08B63F1216-2-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/3D459ED64F3706C18091CB08B63F1216-2-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/3D459ED64F3706C18091CB08B63F1216-2-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/3D459ED64F3706C18091CB08B63F1216-2-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/3D459ED64F3706C18091CB08B63F1216-2-2xl.png 1920w\"></figure>\n<p>保存 然后操作如下</p>\n<pre class=\"language-bash\"><code>gcc -c phase2_patch.c\ngcc -no-pie -o lb2 main.o phase2.o phase2_patch.o\n./lb2</code></pre>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/FCE991272748250152133EF30808B0C4.png\" alt=\"\" width=\"1188\" height=\"89\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/FCE991272748250152133EF30808B0C4-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/FCE991272748250152133EF30808B0C4-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/FCE991272748250152133EF30808B0C4-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/FCE991272748250152133EF30808B0C4-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/FCE991272748250152133EF30808B0C4-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/FCE991272748250152133EF30808B0C4-2xl.png 1920w\"></figure>\n<h2>Phase3</h2>\n<p>一个简单switch的判断 不让我们改text 那我们可以改跳转表。cookie是XUNJETIAY，然后通过它们与A的偏移去跳转表找对应的地址执行代码 v1的数字是ascii。</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/DCDF004EA2243BFA94448E2395CBC943.png\" alt=\"\" width=\"579\" height=\"1458\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/DCDF004EA2243BFA94448E2395CBC943-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/DCDF004EA2243BFA94448E2395CBC943-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/DCDF004EA2243BFA94448E2395CBC943-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/DCDF004EA2243BFA94448E2395CBC943-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/DCDF004EA2243BFA94448E2395CBC943-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/DCDF004EA2243BFA94448E2395CBC943-2xl.png 1920w\"></figure>\n<p>举个例子 是B23000000我们可以直接改rodata偏移，只需要我们改一下需要跳转的位置就好</p>\n<p>A-Z对应是0-25</p>\n<p>将字母替换为对应的位置：</p>\n<p>X U N J E T I A Y → 23 20 13 9 4 19 8 0 24</p>\n<p>那么他的意思就是从头到尾 去跳转表对应的位置去执行一个打印字符的指令。举个例子比如我们第一个需要打印的是字母'B' 我们看一下rodata段的第23个。是0xfb</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/477B910F1903E34B984C783BF0A3E86E.png\" alt=\"\" width=\"375\" height=\"551\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/477B910F1903E34B984C783BF0A3E86E-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/477B910F1903E34B984C783BF0A3E86E-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/477B910F1903E34B984C783BF0A3E86E-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/477B910F1903E34B984C783BF0A3E86E-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/477B910F1903E34B984C783BF0A3E86E-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/477B910F1903E34B984C783BF0A3E86E-2xl.png 1920w\"></figure>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/D08632E05C05D5C032F884231B5139C8.png\" alt=\"\" width=\"732\" height=\"93\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/D08632E05C05D5C032F884231B5139C8-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/D08632E05C05D5C032F884231B5139C8-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/D08632E05C05D5C032F884231B5139C8-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/D08632E05C05D5C032F884231B5139C8-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/D08632E05C05D5C032F884231B5139C8-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/D08632E05C05D5C032F884231B5139C8-2xl.png 1920w\"></figure>\n<p>很不幸他会跳到fb 最后打印字符@</p>\n<p>这时候我们就可以尝试修改跳转的位置 例如我们要跳到B 先找找</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/81F16DAF1817B6B728BB4546F84B89C1-2.png\" alt=\"\" width=\"846\" height=\"99\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/81F16DAF1817B6B728BB4546F84B89C1-2-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/81F16DAF1817B6B728BB4546F84B89C1-2-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/81F16DAF1817B6B728BB4546F84B89C1-2-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/81F16DAF1817B6B728BB4546F84B89C1-2-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/81F16DAF1817B6B728BB4546F84B89C1-2-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/81F16DAF1817B6B728BB4546F84B89C1-2-2xl.png 1920w\"></figure>\n<p>在0x77 我们只需要改为0x77就可以</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal); outline: 3px solid rgba(var(--color-primary-rgb), 0.55) !important;\" src=\"https://blog.xnlemon.top/media/posts/1/459396C565B71AF06C2ADBBC1BF72F26.png\" alt=\"\" width=\"324\" height=\"186\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/459396C565B71AF06C2ADBBC1BF72F26-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/459396C565B71AF06C2ADBBC1BF72F26-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/459396C565B71AF06C2ADBBC1BF72F26-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/459396C565B71AF06C2ADBBC1BF72F26-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/459396C565B71AF06C2ADBBC1BF72F26-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/459396C565B71AF06C2ADBBC1BF72F26-2xl.png 1920w\"></figure>\n<p>改完进终端执行</p>\n<pre class=\"language-bash\"><code>gcc -no-pie -o lb3 main.o phase3.o\n./lb3</code></pre>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.xnlemon.top/media/posts/1/F46D82FD808085E2A91D68170BAFD446.png\" alt=\"\" width=\"1019\" height=\"69\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.xnlemon.top/media/posts/1/responsive/F46D82FD808085E2A91D68170BAFD446-xs.png 640w ,https://blog.xnlemon.top/media/posts/1/responsive/F46D82FD808085E2A91D68170BAFD446-sm.png 768w ,https://blog.xnlemon.top/media/posts/1/responsive/F46D82FD808085E2A91D68170BAFD446-md.png 1024w ,https://blog.xnlemon.top/media/posts/1/responsive/F46D82FD808085E2A91D68170BAFD446-lg.png 1366w ,https://blog.xnlemon.top/media/posts/1/responsive/F46D82FD808085E2A91D68170BAFD446-xl.png 1600w ,https://blog.xnlemon.top/media/posts/1/responsive/F46D82FD808085E2A91D68170BAFD446-2xl.png 1920w\"></figure>\n<p>可以看到第一个被我们改成了B 之后的自己慢慢找就可以改了。</p>\n<p>希望可以帮到大家。</p>",
            "author": {
                "name": "XnLemon"
            },
            "tags": [
                   "tech"
            ],
            "date_published": "2025-05-27T21:21:16+08:00",
            "date_modified": "2025-06-05T17:38:58+08:00"
        }
    ]
}
